import re

OS = input("What OS do you have? (Unix or Windows) ")

if OS == "U" or OS == "Unix" or OS == "unix":
    delimiter=":"

elif OS == "W" or OS == "Windows" or OS == "windows":
    print("Classpath will be good, but the shell scripts will be useless.")
    delimiter=";"

else:
    print("Aborting.")
    exit()

SQLiteLocation = input("Input location of sqlite-jdbc.jar, full path. ")
ToolsLocation = input("Input location of tools.jar, full path. ")
JUnitLocation = input("Input location of junit4.jar, full path. ")
HamcrestLocation = input("Input location of hamcrest-core.jar, full path." )

SrcLocation = "src/"
TestsLocation = "tests/:."

cpString = """# Classpath generated by createMakefile.py.
CLASSPATH = {0}{1}{2}{1}{3}{1}{4}{1}{5}

JDBCLOC = {6}
TOOLSLOC = {7}
JUNITLOC = {8}
HAMCRESTLOC = {9}

all:
\t#Compile everything.
\tjavac -cp $(CLASSPATH) src/com/psu/group9/*.java
\tjavac -cp $(CLASSPATH) tests/*.java

product:
\t#Compile everything.
\tjavac -cp $(CLASSPATH) src/com/psu/group9/*.java
\tjavac -cp $(CLASSPATH) tests/*.java
\t#Move the com.psu.group9 package out of source.
\tcp -r src/com .
\t
\t#Create the jar out of the com.psu.group9 package.
\tjar -cvfm CA.jar MANIFEST.MF com/psu/group9/*.class
\t
\t#Get rid of the copied com.psu.group9 folder.
\trm -rf com
\t
\t#If the ExtLibs directory doesn't exist, create it.
\tif [ ! -d "ExtLibs" ]; then \
\t\tmkdir ExtLibs; \
\tfi
\t
\t#Copy all eternal libraries to ExtLibs.
\tcp $(JDBCLOC) ExtLibs
\tcp $(TOOLSLOC) ExtLibs
\tcp $(JUNITLOC) ExtLibs
\tcp $(HAMCRESTLOC) ExtLibs
\t
\t#Run the JUnit tests, producing the testDB.
\tsh runTests.sh
\t#Copy TestDB to database.db.
\tcp testDB.db database.db
\t#Create the .zip out of the jar and the external libraries.
\t
\tzip -r CA.zip ExtLibs CA.jar database.db
\t
\t#Remove the components that we've created along this route.
\trm CA.jar
\trm -rf ExtLibs

clean:
\trm src/com/psu/group9/*.class
\trm tests/*.class"""

runTerminalString = """# Classpath generated by createMakefile.py.
CLASSPATH="{0}{1}{2}{1}{3}{1}{4}{1}{5}"

java -cp ${{CLASSPATH}} com.psu.group9.Terminal"""

runTestsString = """# Classpath generated by createMakefile.py.
CLASSPATH="{0}{1}{2}{1}{3}{1}{4}{1}{5}{1}{6}"

java -cp ${{CLASSPATH}} org.junit.runner.JUnitCore \
DBTest \
PatientTest \
ProviderTest \
TestService \
TestTransaction"""

manifestString = """Manifest-Version: 1.0
Class-Path: .
            ExtLibs/{0}
            ExtLibs/{1}
            ExtLibs/{2}
            ExtLibs/{3}
Main-Class: com.psu.group9.Terminal
"""


f = open("Makefile", "w")
f.write(cpString.format(SQLiteLocation, delimiter, ToolsLocation, JUnitLocation,
                        SrcLocation, TestsLocation, SQLiteLocation,
                        ToolsLocation, JUnitLocation, HamcrestLocation))
f.close()


f = open("runTerminal.sh", "w")
f.write(runTerminalString.format(SQLiteLocation, delimiter, ToolsLocation, 
                                 JUnitLocation, SrcLocation, TestsLocation))
f.close()

f = open("runTests.sh", "w")
f.write(runTestsString.format(SQLiteLocation, delimiter, ToolsLocation, 
                                 JUnitLocation, SrcLocation, HamcrestLocation,
                                 TestsLocation))
f.close()

f = open("MANIFEST.MF", "w")
f.write(manifestString.format("org." + re.split("/", HamcrestLocation)[-1],
                              re.split("/", SQLiteLocation)[-1],
                              re.split("/", JUnitLocation)[-1],
                              re.split("/", ToolsLocation)[-1]))
f.close()
                              
